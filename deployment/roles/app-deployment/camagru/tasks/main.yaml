- name: Create Deployment for nginx and php
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: app
        namespace: default
        labels:
          tier: backend
      spec:
        replicas: 1
        selector:
          matchLabels:
            tier: backend
        template:
          metadata:
            labels:
              tier: backend
          spec:
            volumes:
              - name: php-database-conf
                configMap:
                  name: php-database-conf
                  items:
                    - key: config
                      path: mustMatch
              - name: nginx-conf
                configMap:
                  name: nginx-conf
                  items:
                    - key: config
                      path: site.conf
              - name: static-assets
                emptyDir: {}
              - name: images-volume
                persistentVolumeClaim:
                  claimName: images-pvc
            imagePullSecrets:
              - name: dockerhub-secret
            initContainers:
              - name: init-php
                image: alpine
                volumeMounts:
                  - name: images-volume
                    mountPath: "/code/userImages/"
                command:
                  - sh
                  - -c
                  - (chmod 777 /code/userImages; chgrp 33 /code/userImages)
            containers:
              - name: php
                image: allefebv/cloud-1:latest
                imagePullPolicy: Always
                ports:
                  - containerPort: 9000
                volumeMounts:
                  - name: static-assets
                    mountPath: "/assets-copy"
                  - name: images-volume
                    mountPath: "/code/userImages/"
                  - name: php-database-conf
                    mountPath: /code/config/database.php
                    subPath: mustMatch
                lifecycle:
                  postStart:
                    exec:
                      command:
                        ["/bin/sh", "-c", "cp -r /code/public/* /assets-copy/"]
              - name: nginx
                image: nginx:latest
                ports:
                  - containerPort: 80
                volumeMounts:
                  - name: nginx-conf
                    mountPath: /etc/nginx/conf.d
                  - name: static-assets
                    mountPath: /code/public/
                  - name: images-volume
                    mountPath: "/code/userImages/"

- name: Service endpoint for php app
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: app-service
        namespace: default
        labels:
          tier: backend
      spec:
        selector:
          tier: backend
        ports:
          - protocol: TCP
            port: 80
            targetPort: 80

- name: TLS certs secret for php app
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: camagru-secret-tls
        namespace: default
      data:
        tls.crt: MIIFDTCCAvWgAwIBAgIUXwC5TKo+dnfTfE9yLsnIdi65UnswDQYJKoZIhvcNAQELBQAwFjEUMBIGA1UEAwwLY2FtYWdydS5jb20wHhcNMjEwNTA2MTYyOTA2WhcNMjEwNjA1MTYyOTA2WjAWMRQwEgYDVQQDDAtjYW1hZ3J1LmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALqKWfRUby9D890rj4dxsieGFrQMCZ/3oF/LmxIOhG4iglmWBxL/XPYLJcw1SC+hqkd6etOcfFDJsQBnZeFV/xBstBwWh+pye3B8JCgLyhe+AVY1VYQIC60gBcYzfANzmAdEDj9nL8klUrEvBN3I3W8hS8dRcBiDzFiBZgc5th06p80Tl2oA/JUcbP+JQJ5Jpd0bhdzsLqJqApKmCkPX6GDyMBYwgtVhVnFGlhk4qV6Vo2YlpzBWa2gvpbymUw8MQVbfQpCGluLBpSNJysH3OtzGP0TC5oYZjVpLXNNJPqLU5zOhBCmwVjXPW9dmcp3/hE60AsRySpVcGyMCR5ixqtcJEu9KYiuM7MWJY9KtY8Tx8rD5eBlTSn+0lWvyqPyIHm4+KDt/BBDaGVhtplTShKNpWrm/QW4Cx3fSeBuZvJinOIrknyHavUTo0IYd192/P2xyp2pOZ9Wg1EER3d1giVur8lNT/Q9JBJZwGFlQVfSRhvZAac/s/m08fSn5sffsAIr35DpU7aAp8EC6k4uFIL0/KBGE5+igRQCx/G9K9VEQKX3O+x3po4rPk8tm4uHKeiDh3aXdWHTJ9MwnKG+ottkbZi1VJu+cq7UydR5vUY7gicz2sJECtpa454Fkvepf3zNHNZbGSkzQZIUdoLsmsGsz9qRU6gvxTPlhHhmyVHRTAgMBAAGjUzBRMB0GA1UdDgQWBBQozvmF7hmWQ6EDNcg1PaTu8v99KjAfBgNVHSMEGDAWgBQozvmF7hmWQ6EDNcg1PaTu8v99KjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4ICAQCLiqDiyonhiAtLuZ88Rfr22wTcHvPNqYvU/OhJf3rP0AWT8FspVkDjp4uHiIPxzm5XrpwxN8BsS7xHgoUiB1VW3wUY7m+SxzgT6kc13OpbW0+o28tJsCBIqQwYMGbOOwKOLa754EbXAYCDb6y0PCN9BmB0DFwnrENyfhQHU7VdNNXdFXGr1sShsO0HgbK+WaqkAlfVyToZ9Xo6+XLF2rRZVRlvspL6z+7qfLvAOt42u2lDKG6ozjTOdbXG8sZE+LwFTmGc34g4UYTC8AZkkENbSyUA81a6RFJqvegrb0k4U/r0NFyCfnMKiCH1biT90d4tKSQNK2Cks3h4ERcVzEaFdJQV7xYneh3J/ftClHHXm9gtiBrVSfdluwflPfU5hm4S4lmGW9MMqVMKTV+mhZ8VjFs3YuNN7v7HN19hq3ytaKbaxg2Lu2/P/vW/sqjNpFUEQ4yjzwd/C1KZYuZyNLtjo+3cpznT5jznm2We7WmX6f+zXsoxeEETFOLxNCVxIgHccwY2GqqGUmDj60JesWOWCmNZxNvJz4uz+KBKbqL3Jq2ZMJa5uAj4QhLd2L5GtYGdyYidLMkrwiemck4Kf4Chqmw529M8IdJOEKJCkMYdN1NFISNVomSocbN023h1LeUBPGbm0YnfEn7HnTzS6piR7fk+ZqJa/9VypAWkEJTj8Q==
        tls.key: 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
      type: kubernetes.io/tls

- name: Dockerhub credentials secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        namespace: default
        name: dockerhub-secret
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: ***REMOVED***

- name: Volume creation for images storage
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: images-pv
        namespace: default
        labels:
          storage-tier: images
      spec:
        accessModes:
          - ReadWriteOnce
        capacity:
          storage: 1Gi
        hostPath:
          path: /data/images-pv/

- name: Volume claim for image storage
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: images-pvc
        namespace: default
      spec:
        volumeMode: Filesystem
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        selector:
          matchLabels:
            storage-tier: images

- name: Nginx configuration definition
  community.kubernetes.k8s:
    state: present
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: nginx-conf
        namespace: default
        labels:
          tier: backend
      data:
        config: |
          server {
            listen 80;
            server_name _;
            root /code;

            error_log  /var/log/nginx/error.log;
            access_log /var/log/nginx/access.log;

            location / {
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
                fastcgi_param DOCUMENT_ROOT /code;
            }

            location /public/ {
              sendfile on;
            }

            location /userImages/ {
              sendfile on;
            }

            location ~ \.php$ {
                fastcgi_pass 127.0.0.1:9000;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
                fastcgi_param DOCUMENT_ROOT /code;
              }
          }

- name: php database configuration definition - local
  community.kubernetes.k8s:
    state: present
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: php-database-conf
        namespace: default
        labels:
          tier: backend
      data:
        config: |
          <?php
            $DB_HOST = "mysql-service";
            $DB_PORT = "3306";
            $DB_NAME = "camagru";
            $DB_DSN_EXISTS = "mysql:host=" . $DB_HOST . ";port=" . $DB_PORT . ";dbname=" . $DB_NAME;
            $DB_DSN_CREATE = "mysql:host=" . $DB_HOST . ";port=" . $DB_PORT;
            $DB_USER = ***REMOVED***;
            $DB_PASSWORD = "***REMOVED***";
  tags:
    - local

- name: php database configuration definition - cloud
  community.kubernetes.k8s:
    state: present
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: php-database-conf
        namespace: default
        labels:
          tier: backend
      data:
        config: |
          <?php
            $DB_HOST = "{{ db_host }}";
            $DB_PORT = "3306";
            $DB_NAME = "camagru";
            $DB_DSN_EXISTS = "mysql:host=" . $DB_HOST . ";port=" . $DB_PORT . ";dbname=" . $DB_NAME;
            $DB_DSN_CREATE = "mysql:host=" . $DB_HOST . ";port=" . $DB_PORT;
            $DB_USER = ***REMOVED***;
            $DB_PASSWORD = "***REMOVED***";
  tags:
    - cloud
